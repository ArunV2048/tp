@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4

actor User
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":SortByPaidCommandParser" as SortByPaidCommandParser LOGIC_COLOR
participant ":SortByPaidCommand" as SortByPaidCommand LOGIC_COLOR
participant ":Model" as Model LOGIC_COLOR
participant ":AddressBook" as AddressBook LOGIC_COLOR
participant ":UniquePersonList" as UniquePersonList LOGIC_COLOR

User -> LogicManager : execute("sortbypaid")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("sortbypaid")
activate AddressBookParser

AddressBookParser -> SortByPaidCommandParser : parse("")
activate SortByPaidCommandParser

SortByPaidCommandParser -> SortByPaidCommand : new SortByPaidCommand()
activate SortByPaidCommand
SortByPaidCommandParser --> AddressBookParser : SortByPaidCommand
deactivate SortByPaidCommandParser

AddressBookParser --> LogicManager : SortByPaidCommand
deactivate AddressBookParser

LogicManager -> SortByPaidCommand : execute(model)
activate SortByPaidCommand

SortByPaidCommand -> Model : sortPersonListByPaid()
activate Model

Model -> AddressBook : sortByPaid()
activate AddressBook

AddressBook -> UniquePersonList : sortByPaid()
activate UniquePersonList

UniquePersonList -> UniquePersonList : internalList.sort(by paid status)
note right of UniquePersonList
  Sorts by Person.getPaymentStatus().value
  Unpaid (false) comes first
  Paid (true) comes second
end note

UniquePersonList --> AddressBook : sorted
deactivate UniquePersonList

AddressBook --> Model : sorted
deactivate AddressBook

Model --> SortByPaidCommand : sorted
deactivate Model

SortByPaidCommand -> SortByPaidCommand : new CommandResult("List sorted by paid status...")
SortByPaidCommand --> LogicManager : CommandResult
deactivate SortByPaidCommand

LogicManager --> User : "List sorted by paid status (unpaid first, paid second)"
deactivate LogicManager

@enduml
